### YamlMime:ManagedReference
items:
- uid: IDAnalyzer.Profile
  commentId: T:IDAnalyzer.Profile
  id: Profile
  parent: IDAnalyzer
  children:
  - IDAnalyzer.Profile.#ctor(System.String)
  - IDAnalyzer.Profile.AAMVABarcodeParsing(System.Boolean)
  - IDAnalyzer.Profile.autoCrop(System.Boolean,System.Boolean)
  - IDAnalyzer.Profile.canvasSize(System.Int32)
  - IDAnalyzer.Profile.decisionTrigger(System.Double,System.Double)
  - IDAnalyzer.Profile.inferFullName(System.Boolean)
  - IDAnalyzer.Profile.loadFromJson(System.String)
  - IDAnalyzer.Profile.objectDetection(System.Boolean)
  - IDAnalyzer.Profile.obscure(System.String[])
  - IDAnalyzer.Profile.orientationCorrection(System.Boolean)
  - IDAnalyzer.Profile.outputImage(System.Boolean,System.String)
  - IDAnalyzer.Profile.outputSize(System.Int32)
  - IDAnalyzer.Profile.profileId
  - IDAnalyzer.Profile.profileOverride
  - IDAnalyzer.Profile.restrictDocumentCountry(System.String)
  - IDAnalyzer.Profile.restrictDocumentState(System.String)
  - IDAnalyzer.Profile.restrictDocumentType(System.String)
  - IDAnalyzer.Profile.saveResult(System.Boolean,System.Boolean)
  - IDAnalyzer.Profile.SECURITY_HIGH
  - IDAnalyzer.Profile.SECURITY_LOW
  - IDAnalyzer.Profile.SECURITY_MEDIUM
  - IDAnalyzer.Profile.SECURITY_NONE
  - IDAnalyzer.Profile.setTimezone(System.String)
  - IDAnalyzer.Profile.setWarning(System.String,System.Boolean,System.Double,System.Double,System.Double)
  - IDAnalyzer.Profile.splitFirstName(System.Boolean)
  - IDAnalyzer.Profile.threshold(System.String,System.Double)
  - IDAnalyzer.Profile.transactionAuditReport(System.Boolean)
  - IDAnalyzer.Profile.webhook(System.String)
  langs:
  - csharp
  - vb
  name: Profile
  nameWithType: Profile
  fullName: IDAnalyzer.Profile
  type: Class
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: Profile
    path: IDAnalyzer.cs
    startLine: 137
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public class Profile
    content.vb: Public Class Profile
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: IDAnalyzer.Profile.SECURITY_NONE
  commentId: F:IDAnalyzer.Profile.SECURITY_NONE
  id: SECURITY_NONE
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: SECURITY_NONE
  nameWithType: Profile.SECURITY_NONE
  fullName: IDAnalyzer.Profile.SECURITY_NONE
  type: Field
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: SECURITY_NONE
    path: IDAnalyzer.cs
    startLine: 139
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public static string SECURITY_NONE
    return:
      type: System.String
    content.vb: Public Shared SECURITY_NONE As String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: IDAnalyzer.Profile.SECURITY_LOW
  commentId: F:IDAnalyzer.Profile.SECURITY_LOW
  id: SECURITY_LOW
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: SECURITY_LOW
  nameWithType: Profile.SECURITY_LOW
  fullName: IDAnalyzer.Profile.SECURITY_LOW
  type: Field
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: SECURITY_LOW
    path: IDAnalyzer.cs
    startLine: 140
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public static string SECURITY_LOW
    return:
      type: System.String
    content.vb: Public Shared SECURITY_LOW As String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: IDAnalyzer.Profile.SECURITY_MEDIUM
  commentId: F:IDAnalyzer.Profile.SECURITY_MEDIUM
  id: SECURITY_MEDIUM
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: SECURITY_MEDIUM
  nameWithType: Profile.SECURITY_MEDIUM
  fullName: IDAnalyzer.Profile.SECURITY_MEDIUM
  type: Field
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: SECURITY_MEDIUM
    path: IDAnalyzer.cs
    startLine: 141
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public static string SECURITY_MEDIUM
    return:
      type: System.String
    content.vb: Public Shared SECURITY_MEDIUM As String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: IDAnalyzer.Profile.SECURITY_HIGH
  commentId: F:IDAnalyzer.Profile.SECURITY_HIGH
  id: SECURITY_HIGH
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: SECURITY_HIGH
  nameWithType: Profile.SECURITY_HIGH
  fullName: IDAnalyzer.Profile.SECURITY_HIGH
  type: Field
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: SECURITY_HIGH
    path: IDAnalyzer.cs
    startLine: 142
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public static string SECURITY_HIGH
    return:
      type: System.String
    content.vb: Public Shared SECURITY_HIGH As String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: IDAnalyzer.Profile.profileId
  commentId: F:IDAnalyzer.Profile.profileId
  id: profileId
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: profileId
  nameWithType: Profile.profileId
  fullName: IDAnalyzer.Profile.profileId
  type: Field
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: profileId
    path: IDAnalyzer.cs
    startLine: 147
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public string profileId
    return:
      type: System.String
    content.vb: Public profileId As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.profileOverride
  commentId: F:IDAnalyzer.Profile.profileOverride
  id: profileOverride
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: profileOverride
  nameWithType: Profile.profileOverride
  fullName: IDAnalyzer.Profile.profileOverride
  type: Field
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: profileOverride
    path: IDAnalyzer.cs
    startLine: 148
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public Hashtable profileOverride
    return:
      type: System.Collections.Hashtable
    content.vb: Public profileOverride As Hashtable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.#ctor(System.String)
  commentId: M:IDAnalyzer.Profile.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: Profile(String)
  nameWithType: Profile.Profile(String)
  fullName: IDAnalyzer.Profile.Profile(System.String)
  type: Constructor
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: .ctor
    path: IDAnalyzer.cs
    startLine: 154
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nInitialize KYC Profile\n"
  example: []
  syntax:
    content: public Profile(string profileId = "")
    parameters:
    - id: profileId
      type: System.String
      description: Custom profile ID or preset profile (security_none, security_low, security_medium, security_high). SECURITY_NONE will be used if left blank.
    content.vb: Public Sub New(profileId As String = "")
  overload: IDAnalyzer.Profile.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.loadFromJson(System.String)
  commentId: M:IDAnalyzer.Profile.loadFromJson(System.String)
  id: loadFromJson(System.String)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: loadFromJson(String)
  nameWithType: Profile.loadFromJson(String)
  fullName: IDAnalyzer.Profile.loadFromJson(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: loadFromJson
    path: IDAnalyzer.cs
    startLine: 163
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nSet profile configuration with provided JSON string\n"
  example: []
  syntax:
    content: public void loadFromJson(string jsonStr)
    parameters:
    - id: jsonStr
      type: System.String
      description: JSON string containing profile information.
    content.vb: Public Sub loadFromJson(jsonStr As String)
  overload: IDAnalyzer.Profile.loadFromJson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.canvasSize(System.Int32)
  commentId: M:IDAnalyzer.Profile.canvasSize(System.Int32)
  id: canvasSize(System.Int32)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: canvasSize(Int32)
  nameWithType: Profile.canvasSize(Int32)
  fullName: IDAnalyzer.Profile.canvasSize(System.Int32)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: canvasSize
    path: IDAnalyzer.cs
    startLine: 174
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nCanvas Size in pixels, input image larger than this size will be scaled down before further processing, reduced image size will improve inference time but reduce result accuracy. Set 0 to disable image resizing.\n"
  example: []
  syntax:
    content: public void canvasSize(int pixels)
    parameters:
    - id: pixels
      type: System.Int32
      description: ''
    content.vb: Public Sub canvasSize(pixels As Integer)
  overload: IDAnalyzer.Profile.canvasSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.orientationCorrection(System.Boolean)
  commentId: M:IDAnalyzer.Profile.orientationCorrection(System.Boolean)
  id: orientationCorrection(System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: orientationCorrection(Boolean)
  nameWithType: Profile.orientationCorrection(Boolean)
  fullName: IDAnalyzer.Profile.orientationCorrection(System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: orientationCorrection
    path: IDAnalyzer.cs
    startLine: 183
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nCorrect image orientation for rotated images\n"
  example: []
  syntax:
    content: public void orientationCorrection(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: ''
    content.vb: Public Sub orientationCorrection(enabled As Boolean)
  overload: IDAnalyzer.Profile.orientationCorrection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.objectDetection(System.Boolean)
  commentId: M:IDAnalyzer.Profile.objectDetection(System.Boolean)
  id: objectDetection(System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: objectDetection(Boolean)
  nameWithType: Profile.objectDetection(Boolean)
  fullName: IDAnalyzer.Profile.objectDetection(System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: objectDetection
    path: IDAnalyzer.cs
    startLine: 192
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nEnable to automatically detect and return the locations of signature, document and face.\n"
  example: []
  syntax:
    content: public void objectDetection(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: ''
    content.vb: Public Sub objectDetection(enabled As Boolean)
  overload: IDAnalyzer.Profile.objectDetection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.AAMVABarcodeParsing(System.Boolean)
  commentId: M:IDAnalyzer.Profile.AAMVABarcodeParsing(System.Boolean)
  id: AAMVABarcodeParsing(System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: AAMVABarcodeParsing(Boolean)
  nameWithType: Profile.AAMVABarcodeParsing(Boolean)
  fullName: IDAnalyzer.Profile.AAMVABarcodeParsing(System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: AAMVABarcodeParsing
    path: IDAnalyzer.cs
    startLine: 201
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nEnable to parse AAMVA barcode for US/CA ID/DL. Disable this to improve performance if you are not planning on scanning ID/DL from US or Canada.\n"
  example: []
  syntax:
    content: public void AAMVABarcodeParsing(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: ''
    content.vb: Public Sub AAMVABarcodeParsing(enabled As Boolean)
  overload: IDAnalyzer.Profile.AAMVABarcodeParsing*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.saveResult(System.Boolean,System.Boolean)
  commentId: M:IDAnalyzer.Profile.saveResult(System.Boolean,System.Boolean)
  id: saveResult(System.Boolean,System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: saveResult(Boolean, Boolean)
  nameWithType: Profile.saveResult(Boolean, Boolean)
  fullName: IDAnalyzer.Profile.saveResult(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: saveResult
    path: IDAnalyzer.cs
    startLine: 211
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nWhether scan transaction results and output images should be saved on cloud\n"
  example: []
  syntax:
    content: public void saveResult(bool enableSaveTransaction, bool enableSaveTransactionImages)
    parameters:
    - id: enableSaveTransaction
      type: System.Boolean
      description: ''
    - id: enableSaveTransactionImages
      type: System.Boolean
      description: ''
    content.vb: Public Sub saveResult(enableSaveTransaction As Boolean, enableSaveTransactionImages As Boolean)
  overload: IDAnalyzer.Profile.saveResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.outputImage(System.Boolean,System.String)
  commentId: M:IDAnalyzer.Profile.outputImage(System.Boolean,System.String)
  id: outputImage(System.Boolean,System.String)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: outputImage(Boolean, String)
  nameWithType: Profile.outputImage(Boolean, String)
  fullName: IDAnalyzer.Profile.outputImage(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: outputImage
    path: IDAnalyzer.cs
    startLine: 225
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nWhether to return output image as part of API response\n"
  example: []
  syntax:
    content: public void outputImage(bool enableOutputImage, string outputFormat = "url")
    parameters:
    - id: enableOutputImage
      type: System.Boolean
      description: ''
    - id: outputFormat
      type: System.String
      description: ''
    content.vb: Public Sub outputImage(enableOutputImage As Boolean, outputFormat As String = "url")
  overload: IDAnalyzer.Profile.outputImage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.autoCrop(System.Boolean,System.Boolean)
  commentId: M:IDAnalyzer.Profile.autoCrop(System.Boolean,System.Boolean)
  id: autoCrop(System.Boolean,System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: autoCrop(Boolean, Boolean)
  nameWithType: Profile.autoCrop(Boolean, Boolean)
  fullName: IDAnalyzer.Profile.autoCrop(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: autoCrop
    path: IDAnalyzer.cs
    startLine: 239
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nCrop image before saving and returning output\n"
  example: []
  syntax:
    content: public void autoCrop(bool enableAutoCrop, bool enableAdvancedAutoCrop)
    parameters:
    - id: enableAutoCrop
      type: System.Boolean
      description: ''
    - id: enableAdvancedAutoCrop
      type: System.Boolean
      description: ''
    content.vb: Public Sub autoCrop(enableAutoCrop As Boolean, enableAdvancedAutoCrop As Boolean)
  overload: IDAnalyzer.Profile.autoCrop*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.outputSize(System.Int32)
  commentId: M:IDAnalyzer.Profile.outputSize(System.Int32)
  id: outputSize(System.Int32)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: outputSize(Int32)
  nameWithType: Profile.outputSize(Int32)
  fullName: IDAnalyzer.Profile.outputSize(System.Int32)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: outputSize
    path: IDAnalyzer.cs
    startLine: 249
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nMaximum width/height in pixels for output and saved image.\n"
  example: []
  syntax:
    content: public void outputSize(int pixels)
    parameters:
    - id: pixels
      type: System.Int32
      description: ''
    content.vb: Public Sub outputSize(pixels As Integer)
  overload: IDAnalyzer.Profile.outputSize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.inferFullName(System.Boolean)
  commentId: M:IDAnalyzer.Profile.inferFullName(System.Boolean)
  id: inferFullName(System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: inferFullName(Boolean)
  nameWithType: Profile.inferFullName(Boolean)
  fullName: IDAnalyzer.Profile.inferFullName(System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: inferFullName
    path: IDAnalyzer.cs
    startLine: 258
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nGenerate a full name field using parsed first name, middle name and last name.\n"
  example: []
  syntax:
    content: public void inferFullName(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: ''
    content.vb: Public Sub inferFullName(enabled As Boolean)
  overload: IDAnalyzer.Profile.inferFullName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.splitFirstName(System.Boolean)
  commentId: M:IDAnalyzer.Profile.splitFirstName(System.Boolean)
  id: splitFirstName(System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: splitFirstName(Boolean)
  nameWithType: Profile.splitFirstName(Boolean)
  fullName: IDAnalyzer.Profile.splitFirstName(System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: splitFirstName
    path: IDAnalyzer.cs
    startLine: 267
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nIf first name contains more than one word, move second word onwards into middle name field.\n"
  example: []
  syntax:
    content: public void splitFirstName(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: ''
    content.vb: Public Sub splitFirstName(enabled As Boolean)
  overload: IDAnalyzer.Profile.splitFirstName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.transactionAuditReport(System.Boolean)
  commentId: M:IDAnalyzer.Profile.transactionAuditReport(System.Boolean)
  id: transactionAuditReport(System.Boolean)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: transactionAuditReport(Boolean)
  nameWithType: Profile.transactionAuditReport(Boolean)
  fullName: IDAnalyzer.Profile.transactionAuditReport(System.Boolean)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: transactionAuditReport
    path: IDAnalyzer.cs
    startLine: 276
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nEnable to generate a detailed PDF audit report for every transaction.\n"
  example: []
  syntax:
    content: public void transactionAuditReport(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: ''
    content.vb: Public Sub transactionAuditReport(enabled As Boolean)
  overload: IDAnalyzer.Profile.transactionAuditReport*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.setTimezone(System.String)
  commentId: M:IDAnalyzer.Profile.setTimezone(System.String)
  id: setTimezone(System.String)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: setTimezone(String)
  nameWithType: Profile.setTimezone(String)
  fullName: IDAnalyzer.Profile.setTimezone(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: setTimezone
    path: IDAnalyzer.cs
    startLine: 285
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nSet timezone for audit reports. If left blank, UTC will be used. Refer to https://en.wikipedia.org/wiki/List_of_tz_database_time_zones TZ database name list.\n"
  example: []
  syntax:
    content: public void setTimezone(string timezone)
    parameters:
    - id: timezone
      type: System.String
      description: ''
    content.vb: Public Sub setTimezone(timezone As String)
  overload: IDAnalyzer.Profile.setTimezone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.obscure(System.String[])
  commentId: M:IDAnalyzer.Profile.obscure(System.String[])
  id: obscure(System.String[])
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: obscure(String[])
  nameWithType: Profile.obscure(String[])
  fullName: IDAnalyzer.Profile.obscure(System.String[])
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: obscure
    path: IDAnalyzer.cs
    startLine: 294
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public void obscure(string[] fieldKeys)
    parameters:
    - id: fieldKeys
      type: System.String[]
    content.vb: Public Sub obscure(fieldKeys As String())
  overload: IDAnalyzer.Profile.obscure*
  nameWithType.vb: Profile.obscure(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: IDAnalyzer.Profile.obscure(System.String())
  name.vb: obscure(String())
- uid: IDAnalyzer.Profile.webhook(System.String)
  commentId: M:IDAnalyzer.Profile.webhook(System.String)
  id: webhook(System.String)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: webhook(String)
  nameWithType: Profile.webhook(String)
  fullName: IDAnalyzer.Profile.webhook(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: webhook
    path: IDAnalyzer.cs
    startLine: 304
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nEnter a server URL to listen for Docupass verification and scan transaction results\n"
  example: []
  syntax:
    content: public void webhook(string url = "https://www.example.com/webhook.php")
    parameters:
    - id: url
      type: System.String
      description: ''
    content.vb: Public Sub webhook(url As String = "https://www.example.com/webhook.php")
  overload: IDAnalyzer.Profile.webhook*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.threshold(System.String,System.Double)
  commentId: M:IDAnalyzer.Profile.threshold(System.String,System.Double)
  id: threshold(System.String,System.Double)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: threshold(String, Double)
  nameWithType: Profile.threshold(String, Double)
  fullName: IDAnalyzer.Profile.threshold(System.String, System.Double)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: threshold
    path: IDAnalyzer.cs
    startLine: 342
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nSet validation threshold of a specified component\n"
  example: []
  syntax:
    content: public void threshold(string thresholdKey, double thresholdValue)
    parameters:
    - id: thresholdKey
      type: System.String
      description: ''
    - id: thresholdValue
      type: System.Double
      description: ''
    content.vb: Public Sub threshold(thresholdKey As String, thresholdValue As Double)
  overload: IDAnalyzer.Profile.threshold*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.decisionTrigger(System.Double,System.Double)
  commentId: M:IDAnalyzer.Profile.decisionTrigger(System.Double,System.Double)
  id: decisionTrigger(System.Double,System.Double)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: decisionTrigger(Double, Double)
  nameWithType: Profile.decisionTrigger(Double, Double)
  fullName: IDAnalyzer.Profile.decisionTrigger(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: decisionTrigger
    path: IDAnalyzer.cs
    startLine: 357
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nSet decision trigger value\n"
  example: []
  syntax:
    content: public void decisionTrigger(double reviewTrigger = 1, double rejectTrigger = 1)
    parameters:
    - id: reviewTrigger
      type: System.Double
      description: If the final total review score is equal to or greater than this value, the final KYC decision will be &quot;review&quot;
    - id: rejectTrigger
      type: System.Double
      description: If the final total review score is equal to or greater than this value, the final KYC decision will be &quot;reject&quot;. Reject has higher priority than review.
    content.vb: Public Sub decisionTrigger(reviewTrigger As Double = 1, rejectTrigger As Double = 1)
  overload: IDAnalyzer.Profile.decisionTrigger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.setWarning(System.String,System.Boolean,System.Double,System.Double,System.Double)
  commentId: M:IDAnalyzer.Profile.setWarning(System.String,System.Boolean,System.Double,System.Double,System.Double)
  id: setWarning(System.String,System.Boolean,System.Double,System.Double,System.Double)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: setWarning(String, Boolean, Double, Double, Double)
  nameWithType: Profile.setWarning(String, Boolean, Double, Double, Double)
  fullName: IDAnalyzer.Profile.setWarning(System.String, System.Boolean, System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: setWarning
    path: IDAnalyzer.cs
    startLine: 374
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nEnable/Disable and fine-tune how each Document Validation Component affects the final decision.\n"
  example: []
  syntax:
    content: public void setWarning(string code = "UNRECOGNIZED_DOCUMENT", bool enabled = true, double reviewThreshold = -1, double rejectThreshold = 0, double weight = 1)
    parameters:
    - id: code
      type: System.String
      description: Document Validation Component Code / Warning Code
    - id: enabled
      type: System.Boolean
      description: Enable the current Document Validation Component
    - id: reviewThreshold
      type: System.Double
      description: If the current validation has failed to pass, and the specified number is greater than or equal to zero, and the confidence of this warning is greater than or equal to the specified value, the &quot;total review score&quot; will be added by the weight value.
    - id: rejectThreshold
      type: System.Double
      description: If the current validation has failed to pass, and the specified number is greater than or equal to zero, and the confidence of this warning is greater than or equal to the specified value, the &quot;total reject score&quot; will be added by the weight value.
    - id: weight
      type: System.Double
      description: Weight to add to the total review and reject score if the validation has failed to pass.
    content.vb: Public Sub setWarning(code As String = "UNRECOGNIZED_DOCUMENT", enabled As Boolean = True, reviewThreshold As Double = -1, rejectThreshold As Double = 0, weight As Double = 1)
  overload: IDAnalyzer.Profile.setWarning*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.restrictDocumentCountry(System.String)
  commentId: M:IDAnalyzer.Profile.restrictDocumentCountry(System.String)
  id: restrictDocumentCountry(System.String)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: restrictDocumentCountry(String)
  nameWithType: Profile.restrictDocumentCountry(String)
  fullName: IDAnalyzer.Profile.restrictDocumentCountry(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: restrictDocumentCountry
    path: IDAnalyzer.cs
    startLine: 395
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nCheck if the document was issued by specified countries. Separate multiple values with comma. For example &quot;US,CA&quot; would accept documents from the United States and Canada.\n"
  example: []
  syntax:
    content: public void restrictDocumentCountry(string countryCodes = "US,CA,UK")
    parameters:
    - id: countryCodes
      type: System.String
      description: ISO ALPHA-2 Country Code separated by comma
    content.vb: Public Sub restrictDocumentCountry(countryCodes As String = "US,CA,UK")
  overload: IDAnalyzer.Profile.restrictDocumentCountry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.restrictDocumentState(System.String)
  commentId: M:IDAnalyzer.Profile.restrictDocumentState(System.String)
  id: restrictDocumentState(System.String)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: restrictDocumentState(String)
  nameWithType: Profile.restrictDocumentState(String)
  fullName: IDAnalyzer.Profile.restrictDocumentState(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: restrictDocumentState
    path: IDAnalyzer.cs
    startLine: 409
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nCheck if the document was issued by specified state. Separate multiple values with comma. For example &quot;CA,TX&quot; would accept documents from California and Texas.\n"
  example: []
  syntax:
    content: public void restrictDocumentState(string states = "CA,TX")
    parameters:
    - id: states
      type: System.String
      description: State full name or abbreviation separated by comma
    content.vb: Public Sub restrictDocumentState(states As String = "CA,TX")
  overload: IDAnalyzer.Profile.restrictDocumentState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Profile.restrictDocumentType(System.String)
  commentId: M:IDAnalyzer.Profile.restrictDocumentType(System.String)
  id: restrictDocumentType(System.String)
  parent: IDAnalyzer.Profile
  langs:
  - csharp
  - vb
  name: restrictDocumentType(String)
  nameWithType: Profile.restrictDocumentType(String)
  fullName: IDAnalyzer.Profile.restrictDocumentType(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: restrictDocumentType
    path: IDAnalyzer.cs
    startLine: 423
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nCheck if the document was one of the specified types. For example, &quot;PD&quot; would accept both passport and driver license.\n"
  example: []
  syntax:
    content: public void restrictDocumentType(string documentType = "DIP")
    parameters:
    - id: documentType
      type: System.String
      description: 'P: Passport, D: Driver&apos;s License, I: Identity Card'
    content.vb: Public Sub restrictDocumentType(documentType As String = "DIP")
  overload: IDAnalyzer.Profile.restrictDocumentType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: IDAnalyzer
  commentId: N:IDAnalyzer
  name: IDAnalyzer
  nameWithType: IDAnalyzer
  fullName: IDAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Hashtable
  commentId: T:System.Collections.Hashtable
  parent: System.Collections
  isExternal: true
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: IDAnalyzer.Profile.#ctor*
  commentId: Overload:IDAnalyzer.Profile.#ctor
  name: Profile
  nameWithType: Profile.Profile
  fullName: IDAnalyzer.Profile.Profile
- uid: IDAnalyzer.Profile.loadFromJson*
  commentId: Overload:IDAnalyzer.Profile.loadFromJson
  name: loadFromJson
  nameWithType: Profile.loadFromJson
  fullName: IDAnalyzer.Profile.loadFromJson
- uid: IDAnalyzer.Profile.canvasSize*
  commentId: Overload:IDAnalyzer.Profile.canvasSize
  name: canvasSize
  nameWithType: Profile.canvasSize
  fullName: IDAnalyzer.Profile.canvasSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: IDAnalyzer.Profile.orientationCorrection*
  commentId: Overload:IDAnalyzer.Profile.orientationCorrection
  name: orientationCorrection
  nameWithType: Profile.orientationCorrection
  fullName: IDAnalyzer.Profile.orientationCorrection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IDAnalyzer.Profile.objectDetection*
  commentId: Overload:IDAnalyzer.Profile.objectDetection
  name: objectDetection
  nameWithType: Profile.objectDetection
  fullName: IDAnalyzer.Profile.objectDetection
- uid: IDAnalyzer.Profile.AAMVABarcodeParsing*
  commentId: Overload:IDAnalyzer.Profile.AAMVABarcodeParsing
  name: AAMVABarcodeParsing
  nameWithType: Profile.AAMVABarcodeParsing
  fullName: IDAnalyzer.Profile.AAMVABarcodeParsing
- uid: IDAnalyzer.Profile.saveResult*
  commentId: Overload:IDAnalyzer.Profile.saveResult
  name: saveResult
  nameWithType: Profile.saveResult
  fullName: IDAnalyzer.Profile.saveResult
- uid: IDAnalyzer.Profile.outputImage*
  commentId: Overload:IDAnalyzer.Profile.outputImage
  name: outputImage
  nameWithType: Profile.outputImage
  fullName: IDAnalyzer.Profile.outputImage
- uid: IDAnalyzer.Profile.autoCrop*
  commentId: Overload:IDAnalyzer.Profile.autoCrop
  name: autoCrop
  nameWithType: Profile.autoCrop
  fullName: IDAnalyzer.Profile.autoCrop
- uid: IDAnalyzer.Profile.outputSize*
  commentId: Overload:IDAnalyzer.Profile.outputSize
  name: outputSize
  nameWithType: Profile.outputSize
  fullName: IDAnalyzer.Profile.outputSize
- uid: IDAnalyzer.Profile.inferFullName*
  commentId: Overload:IDAnalyzer.Profile.inferFullName
  name: inferFullName
  nameWithType: Profile.inferFullName
  fullName: IDAnalyzer.Profile.inferFullName
- uid: IDAnalyzer.Profile.splitFirstName*
  commentId: Overload:IDAnalyzer.Profile.splitFirstName
  name: splitFirstName
  nameWithType: Profile.splitFirstName
  fullName: IDAnalyzer.Profile.splitFirstName
- uid: IDAnalyzer.Profile.transactionAuditReport*
  commentId: Overload:IDAnalyzer.Profile.transactionAuditReport
  name: transactionAuditReport
  nameWithType: Profile.transactionAuditReport
  fullName: IDAnalyzer.Profile.transactionAuditReport
- uid: IDAnalyzer.Profile.setTimezone*
  commentId: Overload:IDAnalyzer.Profile.setTimezone
  name: setTimezone
  nameWithType: Profile.setTimezone
  fullName: IDAnalyzer.Profile.setTimezone
- uid: IDAnalyzer.Profile.obscure*
  commentId: Overload:IDAnalyzer.Profile.obscure
  name: obscure
  nameWithType: Profile.obscure
  fullName: IDAnalyzer.Profile.obscure
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: IDAnalyzer.InvalidArgumentException
  commentId: T:IDAnalyzer.InvalidArgumentException
  name: InvalidArgumentException
  nameWithType: InvalidArgumentException
  fullName: IDAnalyzer.InvalidArgumentException
- uid: IDAnalyzer.Profile.webhook*
  commentId: Overload:IDAnalyzer.Profile.webhook
  name: webhook
  nameWithType: Profile.webhook
  fullName: IDAnalyzer.Profile.webhook
- uid: IDAnalyzer.Profile.threshold*
  commentId: Overload:IDAnalyzer.Profile.threshold
  name: threshold
  nameWithType: Profile.threshold
  fullName: IDAnalyzer.Profile.threshold
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: IDAnalyzer.Profile.decisionTrigger*
  commentId: Overload:IDAnalyzer.Profile.decisionTrigger
  name: decisionTrigger
  nameWithType: Profile.decisionTrigger
  fullName: IDAnalyzer.Profile.decisionTrigger
- uid: IDAnalyzer.Profile.setWarning*
  commentId: Overload:IDAnalyzer.Profile.setWarning
  name: setWarning
  nameWithType: Profile.setWarning
  fullName: IDAnalyzer.Profile.setWarning
- uid: IDAnalyzer.Profile.restrictDocumentCountry*
  commentId: Overload:IDAnalyzer.Profile.restrictDocumentCountry
  name: restrictDocumentCountry
  nameWithType: Profile.restrictDocumentCountry
  fullName: IDAnalyzer.Profile.restrictDocumentCountry
- uid: IDAnalyzer.Profile.restrictDocumentState*
  commentId: Overload:IDAnalyzer.Profile.restrictDocumentState
  name: restrictDocumentState
  nameWithType: Profile.restrictDocumentState
  fullName: IDAnalyzer.Profile.restrictDocumentState
- uid: IDAnalyzer.Profile.restrictDocumentType*
  commentId: Overload:IDAnalyzer.Profile.restrictDocumentType
  name: restrictDocumentType
  nameWithType: Profile.restrictDocumentType
  fullName: IDAnalyzer.Profile.restrictDocumentType
