### YamlMime:ManagedReference
items:
- uid: IDAnalyzer.Transaction
  commentId: T:IDAnalyzer.Transaction
  id: Transaction
  parent: IDAnalyzer
  children:
  - IDAnalyzer.Transaction.#ctor(System.String)
  - IDAnalyzer.Transaction.deleteTransaction(System.String)
  - IDAnalyzer.Transaction.exportTransaction(System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  - IDAnalyzer.Transaction.getTransaction(System.String)
  - IDAnalyzer.Transaction.listTransaction(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  - IDAnalyzer.Transaction.saveFile(System.String,System.String)
  - IDAnalyzer.Transaction.saveImage(System.String,System.String)
  - IDAnalyzer.Transaction.updateTransaction(System.String,System.String)
  langs:
  - csharp
  - vb
  name: Transaction
  nameWithType: Transaction
  fullName: IDAnalyzer.Transaction
  type: Class
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: Transaction
    path: IDAnalyzer.cs
    startLine: 1008
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: 'public class Transaction : ApiParent'
    content.vb: >-
      Public Class Transaction
          Inherits ApiParent
  inheritance:
  - System.Object
  - IDAnalyzer.ApiParent
  inheritedMembers:
  - IDAnalyzer.ApiParent.apiKey
  - IDAnalyzer.ApiParent.client_lib
  - IDAnalyzer.ApiParent.config
  - IDAnalyzer.ApiParent.throwError
  - IDAnalyzer.ApiParent.sess
  - IDAnalyzer.ApiParent.getApiKey(System.String)
  - IDAnalyzer.ApiParent.setParam(System.String,System.Object)
  - IDAnalyzer.ApiParent.throwApiException(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: IDAnalyzer.Transaction.#ctor(System.String)
  commentId: M:IDAnalyzer.Transaction.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: Transaction(String)
  nameWithType: Transaction.Transaction(String)
  fullName: IDAnalyzer.Transaction.Transaction(System.String)
  type: Constructor
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: .ctor
    path: IDAnalyzer.cs
    startLine: 1010
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  syntax:
    content: public Transaction(string apiKey = null)
    parameters:
    - id: apiKey
      type: System.String
    content.vb: Public Sub New(apiKey As String = Nothing)
  overload: IDAnalyzer.Transaction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Transaction.getTransaction(System.String)
  commentId: M:IDAnalyzer.Transaction.getTransaction(System.String)
  id: getTransaction(System.String)
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: getTransaction(String)
  nameWithType: Transaction.getTransaction(String)
  fullName: IDAnalyzer.Transaction.getTransaction(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: getTransaction
    path: IDAnalyzer.cs
    startLine: 1020
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nRetrieve a single transaction record\n"
  example: []
  syntax:
    content: public JObject getTransaction(string transactionId = "")
    parameters:
    - id: transactionId
      type: System.String
      description: Transaction ID
    return:
      type: JObject
      description: ''
    content.vb: Public Function getTransaction(transactionId As String = "") As JObject
  overload: IDAnalyzer.Transaction.getTransaction*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Transaction.listTransaction(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  commentId: M:IDAnalyzer.Transaction.listTransaction(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  id: listTransaction(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: listTransaction(Int32, Int32, Int32, Int32, Int32, String, String, String, String)
  nameWithType: Transaction.listTransaction(Int32, Int32, Int32, Int32, Int32, String, String, String, String)
  fullName: IDAnalyzer.Transaction.listTransaction(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: listTransaction
    path: IDAnalyzer.cs
    startLine: 1045
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nRetrieve a list of transaction history\n"
  example: []
  syntax:
    content: public JObject listTransaction(int order = -1, int limit = 10, int offset = 0, int createdAtMin = 0, int createdAtMax = 0, string filterCustomData = "", string filterDecision = "", string filterDocupass = "", string filterProfileId = "")
    parameters:
    - id: order
      type: System.Int32
      description: Sort results by newest(-1) or oldest(1)
    - id: limit
      type: System.Int32
      description: Number of items to be returned per call
    - id: offset
      type: System.Int32
      description: Start the list from a particular entry index
    - id: createdAtMin
      type: System.Int32
      description: List transactions that were created after this timestamp
    - id: createdAtMax
      type: System.Int32
      description: List transactions that were created before this timestamp
    - id: filterCustomData
      type: System.String
      description: Filter result by customData field
    - id: filterDecision
      type: System.String
      description: Filter result by decision (accept, review, reject)
    - id: filterDocupass
      type: System.String
      description: Filter result by Docupass reference
    - id: filterProfileId
      type: System.String
      description: Filter result by KYC Profile ID
    return:
      type: JObject
      description: ''
    content.vb: Public Function listTransaction(order As Integer = -1, limit As Integer = 10, offset As Integer = 0, createdAtMin As Integer = 0, createdAtMax As Integer = 0, filterCustomData As String = "", filterDecision As String = "", filterDocupass As String = "", filterProfileId As String = "") As JObject
  overload: IDAnalyzer.Transaction.listTransaction*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Transaction.updateTransaction(System.String,System.String)
  commentId: M:IDAnalyzer.Transaction.updateTransaction(System.String,System.String)
  id: updateTransaction(System.String,System.String)
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: updateTransaction(String, String)
  nameWithType: Transaction.updateTransaction(String, String)
  fullName: IDAnalyzer.Transaction.updateTransaction(System.String, System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: updateTransaction
    path: IDAnalyzer.cs
    startLine: 1108
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nUpdate transaction decision, updated decision will be relayed to webhook if set.\n"
  example: []
  syntax:
    content: public JObject updateTransaction(string transactionId = "", string decision = "")
    parameters:
    - id: transactionId
      type: System.String
      description: Transaction ID
    - id: decision
      type: System.String
      description: New decision (accept, review or reject)
    return:
      type: JObject
      description: ''
    content.vb: Public Function updateTransaction(transactionId As String = "", decision As String = "") As JObject
  overload: IDAnalyzer.Transaction.updateTransaction*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Transaction.deleteTransaction(System.String)
  commentId: M:IDAnalyzer.Transaction.deleteTransaction(System.String)
  id: deleteTransaction(System.String)
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: deleteTransaction(String)
  nameWithType: Transaction.deleteTransaction(String)
  fullName: IDAnalyzer.Transaction.deleteTransaction(System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: deleteTransaction
    path: IDAnalyzer.cs
    startLine: 1136
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nDelete a transaction\n"
  example: []
  syntax:
    content: public JObject deleteTransaction(string transactionId = "")
    parameters:
    - id: transactionId
      type: System.String
      description: Transaction ID
    return:
      type: JObject
      description: ''
    content.vb: Public Function deleteTransaction(transactionId As String = "") As JObject
  overload: IDAnalyzer.Transaction.deleteTransaction*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Transaction.saveImage(System.String,System.String)
  commentId: M:IDAnalyzer.Transaction.saveImage(System.String,System.String)
  id: saveImage(System.String,System.String)
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: saveImage(String, String)
  nameWithType: Transaction.saveImage(String, String)
  fullName: IDAnalyzer.Transaction.saveImage(System.String, System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: saveImage
    path: IDAnalyzer.cs
    startLine: 1153
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nDownload transaction image onto local file system\n"
  example: []
  syntax:
    content: public void saveImage(string imageToken = "", string destination = "")
    parameters:
    - id: imageToken
      type: System.String
      description: Image token from transaction API response
    - id: destination
      type: System.String
      description: 'Full destination path including file name, file extension should be jpg, for example: &apos;\home\idcard.jpg&apos;'
    content.vb: Public Sub saveImage(imageToken As String = "", destination As String = "")
  overload: IDAnalyzer.Transaction.saveImage*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Transaction.saveFile(System.String,System.String)
  commentId: M:IDAnalyzer.Transaction.saveFile(System.String,System.String)
  id: saveFile(System.String,System.String)
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: saveFile(String, String)
  nameWithType: Transaction.saveFile(String, String)
  fullName: IDAnalyzer.Transaction.saveFile(System.String, System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: saveFile
    path: IDAnalyzer.cs
    startLine: 1175
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nDownload transaction file onto local file system using secured file name obtained from transaction\n"
  example: []
  syntax:
    content: public void saveFile(string fileName = "", string destination = "")
    parameters:
    - id: fileName
      type: System.String
      description: Secured file name
    - id: destination
      type: System.String
      description: 'Full destination path including file name, for example: &apos;\home\auditreport.pdf&apos;'
    content.vb: Public Sub saveFile(fileName As String = "", destination As String = "")
  overload: IDAnalyzer.Transaction.saveFile*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: IDAnalyzer.Transaction.exportTransaction(System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  commentId: M:IDAnalyzer.Transaction.exportTransaction(System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  id: exportTransaction(System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.String)
  parent: IDAnalyzer.Transaction
  langs:
  - csharp
  - vb
  name: exportTransaction(String, List<String>, String, Boolean, Boolean, Int32, Int32, String, String, String, String)
  nameWithType: Transaction.exportTransaction(String, List<String>, String, Boolean, Boolean, Int32, Int32, String, String, String, String)
  fullName: IDAnalyzer.Transaction.exportTransaction(System.String, System.Collections.Generic.List<System.String>, System.String, System.Boolean, System.Boolean, System.Int32, System.Int32, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: IDAnalyzer/IDAnalyzer.cs
      branch: main
      repo: https://github.com/idanalyzer/id-analyzer-v2-dotnet.git
    id: exportTransaction
    path: IDAnalyzer.cs
    startLine: 1206
  assemblies:
  - IDAnalyzer
  namespace: IDAnalyzer
  summary: "\nDownload transaction archive onto local file system\n"
  example: []
  syntax:
    content: public void exportTransaction(string destination = "", List<string> transactionId = null, string exportType = "csv", bool ignoreUnrecognized = false, bool ignoreDuplicate = false, int createdAtMin = 0, int createdAtMax = 0, string filterCustomData = "", string filterDecision = "", string filterDocupass = "", string filterProfileId = "")
    parameters:
    - id: destination
      type: System.String
      description: 'Full destination path including file name, file extension should be zip, for example: &apos;\home\archive.zip&apos;'
    - id: transactionId
      type: System.Collections.Generic.List{System.String}
      description: '&apos;csv&apos; or &apos;json&apos;'
    - id: exportType
      type: System.String
      description: Ignore unrecognized documents
    - id: ignoreUnrecognized
      type: System.Boolean
      description: Ignore duplicated entries
    - id: ignoreDuplicate
      type: System.Boolean
      description: Export only the specified transaction IDs
    - id: createdAtMin
      type: System.Int32
      description: Export only transactions that were created after this timestamp
    - id: createdAtMax
      type: System.Int32
      description: Export only transactions that were created before this timestamp
    - id: filterCustomData
      type: System.String
      description: Filter export by customData field
    - id: filterDecision
      type: System.String
      description: Filter export by decision (accept, review, reject)
    - id: filterDocupass
      type: System.String
      description: Filter export by Docupass reference
    - id: filterProfileId
      type: System.String
      description: Filter export by KYC Profile ID
    content.vb: Public Sub exportTransaction(destination As String = "", transactionId As List(Of String) = Nothing, exportType As String = "csv", ignoreUnrecognized As Boolean = False, ignoreDuplicate As Boolean = False, createdAtMin As Integer = 0, createdAtMax As Integer = 0, filterCustomData As String = "", filterDecision As String = "", filterDocupass As String = "", filterProfileId As String = "")
  overload: IDAnalyzer.Transaction.exportTransaction*
  exceptions:
  - type: IDAnalyzer.InvalidArgumentException
    commentId: T:IDAnalyzer.InvalidArgumentException
  nameWithType.vb: Transaction.exportTransaction(String, List(Of String), String, Boolean, Boolean, Int32, Int32, String, String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: IDAnalyzer.Transaction.exportTransaction(System.String, System.Collections.Generic.List(Of System.String), System.String, System.Boolean, System.Boolean, System.Int32, System.Int32, System.String, System.String, System.String, System.String)
  name.vb: exportTransaction(String, List(Of String), String, Boolean, Boolean, Int32, Int32, String, String, String, String)
references:
- uid: IDAnalyzer
  commentId: N:IDAnalyzer
  name: IDAnalyzer
  nameWithType: IDAnalyzer
  fullName: IDAnalyzer
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: IDAnalyzer.ApiParent
  commentId: T:IDAnalyzer.ApiParent
  parent: IDAnalyzer
  name: ApiParent
  nameWithType: ApiParent
  fullName: IDAnalyzer.ApiParent
- uid: IDAnalyzer.ApiParent.apiKey
  commentId: F:IDAnalyzer.ApiParent.apiKey
  parent: IDAnalyzer.ApiParent
  name: apiKey
  nameWithType: ApiParent.apiKey
  fullName: IDAnalyzer.ApiParent.apiKey
- uid: IDAnalyzer.ApiParent.client_lib
  commentId: F:IDAnalyzer.ApiParent.client_lib
  parent: IDAnalyzer.ApiParent
  name: client_lib
  nameWithType: ApiParent.client_lib
  fullName: IDAnalyzer.ApiParent.client_lib
- uid: IDAnalyzer.ApiParent.config
  commentId: F:IDAnalyzer.ApiParent.config
  parent: IDAnalyzer.ApiParent
  name: config
  nameWithType: ApiParent.config
  fullName: IDAnalyzer.ApiParent.config
- uid: IDAnalyzer.ApiParent.throwError
  commentId: F:IDAnalyzer.ApiParent.throwError
  parent: IDAnalyzer.ApiParent
  name: throwError
  nameWithType: ApiParent.throwError
  fullName: IDAnalyzer.ApiParent.throwError
- uid: IDAnalyzer.ApiParent.sess
  commentId: F:IDAnalyzer.ApiParent.sess
  parent: IDAnalyzer.ApiParent
  name: sess
  nameWithType: ApiParent.sess
  fullName: IDAnalyzer.ApiParent.sess
- uid: IDAnalyzer.ApiParent.getApiKey(System.String)
  commentId: M:IDAnalyzer.ApiParent.getApiKey(System.String)
  parent: IDAnalyzer.ApiParent
  isExternal: true
  name: getApiKey(String)
  nameWithType: ApiParent.getApiKey(String)
  fullName: IDAnalyzer.ApiParent.getApiKey(System.String)
  spec.csharp:
  - uid: IDAnalyzer.ApiParent.getApiKey(System.String)
    name: getApiKey
    nameWithType: ApiParent.getApiKey
    fullName: IDAnalyzer.ApiParent.getApiKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IDAnalyzer.ApiParent.getApiKey(System.String)
    name: getApiKey
    nameWithType: ApiParent.getApiKey
    fullName: IDAnalyzer.ApiParent.getApiKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IDAnalyzer.ApiParent.setParam(System.String,System.Object)
  commentId: M:IDAnalyzer.ApiParent.setParam(System.String,System.Object)
  parent: IDAnalyzer.ApiParent
  isExternal: true
  name: setParam(String, Object)
  nameWithType: ApiParent.setParam(String, Object)
  fullName: IDAnalyzer.ApiParent.setParam(System.String, System.Object)
  spec.csharp:
  - uid: IDAnalyzer.ApiParent.setParam(System.String,System.Object)
    name: setParam
    nameWithType: ApiParent.setParam
    fullName: IDAnalyzer.ApiParent.setParam
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IDAnalyzer.ApiParent.setParam(System.String,System.Object)
    name: setParam
    nameWithType: ApiParent.setParam
    fullName: IDAnalyzer.ApiParent.setParam
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IDAnalyzer.ApiParent.throwApiException(System.Boolean)
  commentId: M:IDAnalyzer.ApiParent.throwApiException(System.Boolean)
  parent: IDAnalyzer.ApiParent
  isExternal: true
  name: throwApiException(Boolean)
  nameWithType: ApiParent.throwApiException(Boolean)
  fullName: IDAnalyzer.ApiParent.throwApiException(System.Boolean)
  spec.csharp:
  - uid: IDAnalyzer.ApiParent.throwApiException(System.Boolean)
    name: throwApiException
    nameWithType: ApiParent.throwApiException
    fullName: IDAnalyzer.ApiParent.throwApiException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: IDAnalyzer.ApiParent.throwApiException(System.Boolean)
    name: throwApiException
    nameWithType: ApiParent.throwApiException
    fullName: IDAnalyzer.ApiParent.throwApiException
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: IDAnalyzer.Transaction.#ctor*
  commentId: Overload:IDAnalyzer.Transaction.#ctor
  name: Transaction
  nameWithType: Transaction.Transaction
  fullName: IDAnalyzer.Transaction.Transaction
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IDAnalyzer.InvalidArgumentException
  commentId: T:IDAnalyzer.InvalidArgumentException
  name: InvalidArgumentException
  nameWithType: InvalidArgumentException
  fullName: IDAnalyzer.InvalidArgumentException
- uid: IDAnalyzer.Transaction.getTransaction*
  commentId: Overload:IDAnalyzer.Transaction.getTransaction
  name: getTransaction
  nameWithType: Transaction.getTransaction
  fullName: IDAnalyzer.Transaction.getTransaction
- uid: JObject
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: JObject
- uid: IDAnalyzer.Transaction.listTransaction*
  commentId: Overload:IDAnalyzer.Transaction.listTransaction
  name: listTransaction
  nameWithType: Transaction.listTransaction
  fullName: IDAnalyzer.Transaction.listTransaction
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: IDAnalyzer.Transaction.updateTransaction*
  commentId: Overload:IDAnalyzer.Transaction.updateTransaction
  name: updateTransaction
  nameWithType: Transaction.updateTransaction
  fullName: IDAnalyzer.Transaction.updateTransaction
- uid: IDAnalyzer.Transaction.deleteTransaction*
  commentId: Overload:IDAnalyzer.Transaction.deleteTransaction
  name: deleteTransaction
  nameWithType: Transaction.deleteTransaction
  fullName: IDAnalyzer.Transaction.deleteTransaction
- uid: IDAnalyzer.Transaction.saveImage*
  commentId: Overload:IDAnalyzer.Transaction.saveImage
  name: saveImage
  nameWithType: Transaction.saveImage
  fullName: IDAnalyzer.Transaction.saveImage
- uid: IDAnalyzer.Transaction.saveFile*
  commentId: Overload:IDAnalyzer.Transaction.saveFile
  name: saveFile
  nameWithType: Transaction.saveFile
  fullName: IDAnalyzer.Transaction.saveFile
- uid: IDAnalyzer.Transaction.exportTransaction*
  commentId: Overload:IDAnalyzer.Transaction.exportTransaction
  name: exportTransaction
  nameWithType: Transaction.exportTransaction
  fullName: IDAnalyzer.Transaction.exportTransaction
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
